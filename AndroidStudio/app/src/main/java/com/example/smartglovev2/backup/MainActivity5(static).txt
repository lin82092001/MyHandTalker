package com.example.jimmy.smartglovev2;

import android.app.AlertDialog;																//	引入android.app.AlertDialog函式庫
import android.bluetooth.BluetoothAdapter;													//	引入android.bluetooth.BluetoothAdapter函式庫
import android.bluetooth.BluetoothDevice;													//	引入android.bluetooth.BluetoothDevice函式庫
import android.bluetooth.BluetoothSocket;													//	引入android.bluetooth.BluetoothSocket函式庫
import android.content.BroadcastReceiver;													//	引入android.content.BroadcastReceiver函式庫
import android.content.Context;																//	引入android.content.Context函式庫
import android.content.DialogInterface;														//	引入android.content.DialogInterface函式庫
import android.content.Intent;																//	引入android.content.Intent函式庫
import android.content.IntentFilter;														//	引入android.content.IntentFilter函式庫
import android.content.pm.PackageManager;													//	引入android.content.pm.PackageManager函式庫
import android.content.pm.ResolveInfo;														//	引入android.content.pm.ResolveInfo函式庫
import android.media.MediaPlayer;															//	引入android.media.MediaPlayer函式庫
import android.os.Bundle;																	//	引入android.os.Bundle函式庫
import android.os.Handler;																	//	引入android.os.Handler函式庫
import android.os.Message;																	//	引入android.os.Message函式庫
import android.speech.RecognizerIntent;														//	引入android.speech.RecognizerIntent函式庫
import android.support.v7.app.AppCompatActivity;											//	引入android.support.v7.app.AppCompatActivity函式庫
import android.util.Log;																	//	引入android.util.Log函式庫
import android.view.ContextMenu;															//	引入android.view.ContextMenu函式庫
import android.view.ContextMenu.ContextMenuInfo;											//	引入android.view.ContextMenu.ContextMenuInfo函式庫
import android.view.View;																	//	引入android.view.View函式庫
import android.view.View.OnClickListener;													//	引入android.view.View.OnClickListener函式庫
import android.view.Window;																	//	引入android.view.Window函式庫
import android.widget.AdapterView;															//	引入android.widget.AdapterView函式庫
import android.widget.ArrayAdapter;															//	引入android.widget.ArrayAdapter函式庫
import android.widget.Button;																//	引入android.widget.Button函式庫
import android.widget.LinearLayout;															//	引入android.widget.LinearLayout函式庫
import android.widget.ListView;																//	引入android.widget.ListView函式庫
import android.widget.TextView;																//	引入android.widget.TextView函式庫
/*  宣告TextView_R與TextView_L物件 */
import android.widget.Toast;																//	引入android.widget.Toast函式庫
import android.widget.AdapterView.OnItemClickListener;										//	引入android.widget.AdapterView.OnItemClickListener函式庫

import java.io.IOException;																	//	引入java.io.IOException函式庫
import java.io.InputStream;																	//	引入java.io.InputStream函式庫
import java.util.ArrayList;																	//	引入java.util.ArrayList函式庫
import java.util.List;																		//	引入java.util.List函式庫
import java.util.Set;																		//	引入java.util.Set函式庫
import java.util.UUID;																		//	引入java.util.UUID函式庫

public class MainActivity extends AppCompatActivity									 		//	MainActivity類別
{																							//	進入MainActivity類別
	private final static String TAG = "MainActivity";
	//private static final int VOICE_RECOGNITION_REQUEST_CODE = 1234;
	//  VOICE_RECOGNITION_REQUEST_CODE是自訂 因為當結果回傳時要告訴startActivityForResult是誰呼叫他
	private static final int UPDATE_SETTING_SUCCESS = 0x0001;
	private static final int UPDATE_SETTING_SU = 0x0002;
	public enum BT_STATE																	//	藍芽裝置狀態列舉(Program State enum)
	{																						//	進入BT_STATE列舉
		SELECT_BT_DEVICE, CONNECTING, CONNECTED												//	列出藍芽狀態
	};																						//	結束BT_STATE列舉
	//*****物件宣告******
	TextView TextView_R;																	//	宣告TextView物件TextView_R
	TextView TextView_L;																	//	宣告TextView物件TextView_L
	private TextView btinformation;															//	宣告btinformation物件為TextView，用於顯示藍芽資訊
	private TextView LHTV, RHTV;
	private ListView mList;																	//	宣告ListView物件mList
	private ArrayList<TextView> left, right;												//	宣告ArrayList<TextView>物件left與right
	private Button conn;																	//	宣告連線按鈕物件(ui Button)
	// ui - bluetooth device list
	private ListView LHBTList;																//	建立LHBTList為ListView物件
	private ListView RHBTList;																//	建立RHBTList為ListView物件
	//*****bluetooth adapter*****
	private BluetoothAdapter BTadapter;														//	宣告BTadapter物件為藍芽BluetoothAdapter
	private ArrayAdapter<String> mDeviceArrayAdapter;										//	宣告mDeviceArrayAdapter為ArrayAdapter<String>
	// Program now state
	private BT_STATE state = BT_STATE.SELECT_BT_DEVICE;										//	宣告state變數為BT_STATE列舉型態
	// selected Left hand bluetooth device address
	private String LHAddress = "";															//	宣告LHAddress字串變數記錄左手藍芽裝置位置
	// selected right hand bluetooth device address
	private String RHAddress = "";															//	宣告RHAddress字串變數記錄右手藍芽裝置位置
	private boolean secure = true;															//	宣告secure為布林變數，初始值為true
	// Unique UUID for this application
	private static final UUID MY_UUID_SECURE = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
	private static final UUID MY_UUID_INSECURE = UUID.fromString("8ce255c0-200a-11e0-ac64-0800200c9a66");
	// left hand bluetooth socket , right hand bluetooth socket
	private BluetoothSocket LHBS, RHBS;														//	宣告左右手藍芽BluetoothSocket物件
	// communication Thread
	private Comm a, b;
	// 資料處理執行緒
	private DataProcess dataProcess;
	MyHandler handler = new MyHandler();
	private String word_a;
	//---Smart Glove V2編碼處理用變數---
	
	
	@Override
	protected void onStart() 																//	onStart方法
	{																						//	進入onStart方法
		super.onStart();																	//	APP啟動

		Set<BluetoothDevice> btBondedSet = BTadapter.getBondedDevices();
		if (btBondedSet.size() > 0) {
			for (BluetoothDevice device : btBondedSet) {
				mDeviceArrayAdapter.add(device.getName() + "\n" + device.getAddress());
			}
		}

		if (this.BTadapter == null) {
			Toast.makeText(this, "本裝置不支援藍芽連線功能", Toast.LENGTH_LONG).show();

			this.finish();
			return;
		}
		if (requireBluetooth()) {
			showBTinformation();
		}
	}
	@Override
	protected void onCreate(Bundle savedInstanceState)										//  程式開啟時執行
	{																						//  進入onCreate程式
		super.onCreate(savedInstanceState);
		this.requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);					//	設定應用程式視窗顯示模式為FEATURE_INDETERMINATE_PROGRESS
		setContentView(R.layout.activity_main);
		//*****連結物件*****()
		TextView_R=(TextView) findViewById(R.id.TextView_R);								//  將Layout物件TextView_R與該程式宣告物件TextView_R連結
		TextView_L=(TextView) findViewById(R.id.TextView_L);								//  將Layout物件TextView_L與該程式宣告物件TextView_L連結
		LHTV = (TextView) this.findViewById(R.id.LHTextView);
		RHTV = (TextView) this.findViewById(R.id.RHTextView);
		btinformation = (TextView) this.findViewById(R.id.BTinformationTextView);			//  將BTinformationTextView與該程式宣告物件btinformation連結
		Button speakButton = (Button) findViewById(R.id.BT_GV);								//  將Layout物件speakButton與該程式宣告物件BT_GV連結
		mList = (ListView) findViewById(R.id.LV_GV);										//  將Layout物件LV_GV與該程式宣告物件mList連結
		LHBTList = (ListView) this.findViewById(R.id.LHBTListView);							//  將LHBTListView與該程式物件LHBTList連結
		RHBTList = (ListView) this.findViewById(R.id.RHBTListView);							//  將RHBTListView與該程式物件RHBTList連結

		conn = (Button) findViewById(R.id.btnok);											//  將btnok與該程式物件conn連結
		conn.setOnClickListener(new OnClickListener()										//  若conn按鈕被按下
		{																					//  進入OnClickListener程式
			@SuppressWarnings("deprecation")
			@Override
			public void onClick(View arg0) {
				switch (state) {
					case SELECT_BT_DEVICE:
						// 沒有選擇裝置，跳緊告
						if (LHAddress == "" || RHAddress == "") {
							new AlertDialog.Builder(MainActivity.this).setTitle("Warning").setMessage("沒有選擇藍芽裝置").setPositiveButton("確定", new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog, int which) {
								}
							}).show();
							break;
						}

						// 選擇相同裝置也跳警告
						if (LHAddress.equals(RHAddress)) {
							new AlertDialog.Builder(MainActivity.this).setTitle("Warning").setMessage("不能選擇相同的藍芽裝置").setPositiveButton("確定", new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog, int which) {
									// TODO Auto-generated method
									// stub
								}
							}).show();
							break;
						}

						// 宣告兩個藍芽裝置
						BluetoothDevice d1,
								d2;
						try {
							d1 = BTadapter.getRemoteDevice(LHAddress);
							d2 = BTadapter.getRemoteDevice(RHAddress);
						} catch (Exception e) {
							Toast.makeText(getApplicationContext(), "裝置未開啟", Toast.LENGTH_LONG).show();
							return;
						}

						conn.setText("連線中...請稍後");

						findViewById(R.id.devicelayout).setVisibility(View.GONE);
						LHBTList.setEnabled(false);
						RHBTList.setEnabled(false);
						state = BT_STATE.CONNECTING;

						BTadapter.cancelDiscovery();

						BluetoothSocket tmp;
						try {
							if (secure) {
								tmp = d1.createRfcommSocketToServiceRecord(MY_UUID_SECURE);
							} else {
								tmp = d1.createInsecureRfcommSocketToServiceRecord(MY_UUID_INSECURE);
							}
						} catch (IOException e) {
							Toast.makeText(getApplicationContext(), "連接到" + d1.getName() + "發生錯誤", Toast.LENGTH_LONG);
							((LinearLayout) findViewById(R.id.devicelayout)).setVisibility(View.VISIBLE);
							conn.setText("連線");
							return;
						}
						LHBS = tmp;

						tmp = null;
						try {
							if (secure) {
								tmp = d2.createRfcommSocketToServiceRecord(MY_UUID_SECURE);
							} else {
								tmp = d2.createInsecureRfcommSocketToServiceRecord(MY_UUID_INSECURE);
							}
						} catch (IOException e) {
							Toast.makeText(getApplicationContext(), "連接到" + d2.getName() + "發生錯誤", Toast.LENGTH_LONG);
							((LinearLayout) findViewById(R.id.devicelayout)).setVisibility(View.VISIBLE);
							conn.setText("連線");
							return;
						}
						RHBS = tmp;

						try {
							LHBS.connect();
							RHBS.connect();
						} catch (IOException e) {
							Toast.makeText(getApplicationContext(), "連線失敗", Toast.LENGTH_LONG);
							((LinearLayout) findViewById(R.id.devicelayout)).setVisibility(View.VISIBLE);
							conn.setText("連線");
							try {
								LHBS.close();
							} catch (IOException e1) {
							}
							try {
								RHBS.close();
							} catch (IOException e1) {
							}
							return;
						}

						a = new Comm(LHBS, "Left");
						b = new Comm(RHBS, "Right");

						a.setView(left);
						b.setView(right);

						dataProcess = new DataProcess(a, b);

						a.start();
						b.start();
						dataProcess.start();
						state = BT_STATE.CONNECTED;
						conn.setText("關閉連線");
						break;
					case CONNECTING:
						break;
					case CONNECTED:
						dataProcess.isRun = false;
						a.isrun = false;
						b.isrun = false;

						a.interrupt();
						b.interrupt();
						dataProcess.interrupt();

						a = null;
						b = null;
						dataProcess = null;

						((LinearLayout) findViewById(R.id.devicelayout)).setVisibility(View.VISIBLE);
						state = BT_STATE.SELECT_BT_DEVICE;
						conn.setText("連線");
						LHBTList.setEnabled(true);
						RHBTList.setEnabled(true);
						break;
				}
			}
		});																					//  結束OnClickListener程式
		PackageManager pm = getPackageManager();
		List<ResolveInfo> activities = pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);
		if (activities.size() != 0)
		{																					//  進入if敘述
			speakButton.setOnClickListener(new OnClickListener()
			{
				@Override
				public void onClick(View v)													//  onClick程式，speakButton被按下時觸發
				{																			//  進入onClick程式
					// TODO Auto-generated method stub
					startVoiceRecognitionActivity();										//  呼叫startVoiceRecognitionActivity副程式，開始語音辨識
				}																			//  結束onClick程式
			});
		}																					//  結束if敘述
		else
		{																					//  進入else敘述
			speakButton.setEnabled(false);
			speakButton.setText("Recognizer not present");
		}																			   //  結束else敘述
		left = new ArrayList<TextView>();											   //  建立left物件(ArrayList<TextView>型態)
		right = new ArrayList<TextView>();											  //  建立right物件(ArrayList<TextView>型態)
		left.add(((TextView) findViewById(R.id.ltv1)));								  //  新增項目至left ArrayList
		left.add(((TextView) findViewById(R.id.ltv2)));								  //  新增項目至left ArrayList
		left.add(((TextView) findViewById(R.id.ltv3)));								  //  新增項目至left ArrayList
		left.add(((TextView) findViewById(R.id.ltv4)));								  //  新增項目至left ArrayList
		left.add(((TextView) findViewById(R.id.ltv5)));								  //  新增項目至left ArrayList

		right.add((TextView) findViewById(R.id.rtv1));								   //  新增項目至right ArrayList
		right.add((TextView) findViewById(R.id.rtv2));								   //  新增項目至right ArrayList
		right.add((TextView) findViewById(R.id.rtv3));								   //  新增項目至right ArrayList
		right.add((TextView) findViewById(R.id.rtv4));								   //  新增項目至right ArrayList
		right.add((TextView) findViewById(R.id.rtv5));								   //  新增項目至right ArrayList

		mDeviceArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
		this.BTadapter = BluetoothAdapter.getDefaultAdapter();
		LHBTList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> av, View v, int arg2, long arg3) {
				String info = ((TextView) v).getText().toString();
				String address = info.substring(info.length() - 17);
				Log.i(TAG, "click: " + address);
				BluetoothDevice device = BTadapter.getRemoteDevice(address);
				LHAddress = device.getAddress();
				LHTV.setText("左手: " + device.getName());
			}

		});

		RHBTList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> av, View v, int arg2, long arg3) {
				String info = ((TextView) v).getText().toString();
				String address = info.substring(info.length() - 17);
				Log.i(TAG, "click: " + address);
				BluetoothDevice device = BTadapter.getRemoteDevice(address);
				RHAddress = device.getAddress();
				RHTV.setText("右手: " + device.getName());
			}

		});

		LHBTList.setAdapter(this.mDeviceArrayAdapter);
		RHBTList.setAdapter(this.mDeviceArrayAdapter);
	}																				   //  結束onCreate程式
	@Override
	public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)
	{
		// TODO Auto-generated method stub
		super.onCreateContextMenu(menu, v, menuInfo);
	}

	//*****其他副程式、類別*****
	private boolean requireBluetooth() {
		if (!BTadapter.isEnabled()) {
			Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			this.startActivityForResult(enableIntent, BluetoothControl.GET_REQUEST_ENABLE_BT());
			return false;
		}
		return true;
	}
	private void showBTinformation() 
	{
		String address = BTadapter.getAddress();
		String name = BTadapter.getName();
		String information = "藍芽資訊： " + name + " - " + address;
		btinformation.setText(information);
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		this.registerReceiver(mReceiver, filter);

		filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		this.registerReceiver(mReceiver, filter);

		Log.i(TAG, " Receiver");
		BTadapter.startDiscovery();
		this.setProgressBarIndeterminateVisibility(true);
	}
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() 
	{
		@Override
		public void onReceive(Context context, Intent intent) 
		{
			String action = intent.getAction();

			if (BluetoothDevice.ACTION_FOUND.equals(action)) 
			{
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
					String message = "New Bluetooth Device Discovery : " + device.getName() + "\n" + device.getAddress();
					mDeviceArrayAdapter.add(device.getName() + "\n" + device.getAddress());
					Log.i(TAG, message);
				}
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
				Log.i(TAG, "DISCOVERY Finished");
				setProgressBarIndeterminateVisibility(false);
			}
		}
	};
	public class Comm extends Thread {
		// 判斷是否開始執行
		public volatile boolean isrun = true;

		private ArrayList<TextView> information;

		private int how_are_you_value = 0;

		private int last_big;

		private int ShowCount;

		private int[] finger;

		public String communicationNamne = "";

		public String receiveString = "";
		public int x_gac=0;
		public int x_ac=0,y_ac=0,z_ac=0;
		public	int x_dac=0,y_dac=0,z_dac=0;
		public int pre_dg=0;
		/**
		 * 藍芽連線的 Socket
		 */
		private BluetoothSocket socket;
		/**
		 * 接收資料的串流
		 */
		private InputStream ips;

		/**
		 * 建構子，傳入 BluetoothSocket
		 *
		 * @param socket
		 */
		public Comm(BluetoothSocket socket, String name) {
			this.socket = socket;
			this.ips = null;
			ShowCount = -1;
			last_big = -1;
			this.communicationNamne = name;
			// 5跟手指頭
			finger = new int[5];
			how_are_you_value = 0;
			for (int i = 0; i < 5; i++) {
				finger[i] = 0;
			}
			try {
				ips = socket.getInputStream();
			} catch (IOException e) {
			}
		}

		public void setView(ArrayList<TextView> tv) {
			this.information = tv;
		}

		@Override
		public void run() {
			byte[] buffer = new byte[1];
			int bytes = 0;
			String DisplayText = "";
			int DisplayTextCount = 0;
			String ChannelNameTemp = "";													//	暫存通道名稱
			String SensorDataTemp = "";														//	暫存感測器資料
			
			String FAOptputStr = "";
			String FBOptputStr = "";
			String FCOptputStr = "";
			String FDOptputStr = "";
			String FEOptputStr = "";
			
			while (this.isrun) {															//	若資料處理執行中
				try {
					if (this.ips.available() > 0) 											//	若接收到資料
					{																		//	進入if敘述
						bytes = this.ips.read(buffer);
						/****V2編碼顯示方式****/
						String BufferString = new String(buffer, "UTF-8");					//	將buffer轉換為字串
						if(	BufferString.equals("A") || 									//	若當前分析字元為A(通道名稱)
							BufferString.equals("B") || 									//	或當前分析字元為B(通道名稱)
							BufferString.equals("C") || 									//	或當前分析字元為C(通道名稱)
							BufferString.equals("D") || 									//	或當前分析字元為D(通道名稱)
							BufferString.equals("E") || 									//	或當前分析字元為E(通道名稱)
							BufferString.equals("F") || 									//	或當前分析字元為F(通道名稱)
							BufferString.equals("G") || 									//	或當前分析字元為G(通道名稱)
							BufferString.equals("H") || 									//	或當前分析字元為H(通道名稱)
							BufferString.equals("I") || 									//	或當前分析字元為I(通道名稱)
							BufferString.equals("J") || 									//	或當前分析字元為J(通道名稱)
							BufferString.equals("K") || 									//	或當前分析字元為K(通道名稱)
							BufferString.equals("L") )										//	或當前分析字元為L(通道名稱)
						{																	//	進入if敘述
							if( ChannelNameTemp.equals("A") )								//	通道紀錄為"A"
							{																//	進入if敘述
								SensorData.SetFA(Integer.valueOf(SensorDataTemp));			//	填入數值
								if( SensorData.GetFA() < DataProcessing.GetFAth1() )		//	小於第一門檻值
								{															//	進入if敘述
									FAOptputStr = "00";										//	設定FAOptputStr
								}															//	結束if敘述
								else if( SensorData.GetFA() < DataProcessing.GetFAth2() )	//	小於第二門檻值
								{															//	進入else if敘述
									FAOptputStr = "01";										//	設定FAOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFA() < DataProcessing.GetFAth3() )	//	小於第三門檻值
								{															//	進入else if敘述
									FAOptputStr = "11";										//	設定FAOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFA() > DataProcessing.GetFAth3() )	//	大於第三門檻值
								{															//	進入else if敘述
									FAOptputStr = "01";										//	設定FAOptputStr
								}															//	結束else if敘述
							}																//	結束if敘述
							else if( ChannelNameTemp.equals("B") )
							{
								SensorData.SetFB(Integer.valueOf(SensorDataTemp));			//	填入數值
								if( SensorData.GetFB() < DataProcessing.GetFBth1() )		//	小於第一門檻值
								{															//	進入if敘述
									FBOptputStr = "00";										//	設定FBOptputStr
								}															//	結束if敘述
								else if( SensorData.GetFB() < DataProcessing.GetFBth2() )	//	小於第二門檻值
								{															//	進入else if敘述
									FBOptputStr = "01";										//	設定FBOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFB() < DataProcessing.GetFBth3() )	//	小於第三門檻值
								{															//	進入else if敘述
									FBOptputStr = "11";										//	設定FBOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFB() > DataProcessing.GetFBth3() )	//	大於第三門檻值
								{															//	進入else if敘述
									FBOptputStr = "01";										//	設定FBOptputStr
								}															//	結束else if敘述
							}
							else if( ChannelNameTemp.equals("C") )
							{
								SensorData.SetFC(Integer.valueOf(SensorDataTemp));			//	填入數值
								if( SensorData.GetFC() < DataProcessing.GetFCth1() )		//	小於第一門檻值
								{															//	進入if敘述
									FCOptputStr = "00";										//	設定FCOptputStr
								}															//	結束if敘述
								else if( SensorData.GetFC() < DataProcessing.GetFCth2() )	//	小於第二門檻值
								{															//	進入else if敘述
									FCOptputStr = "01";										//	設定FCOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFC() < DataProcessing.GetFCth3() )	//	小於第三門檻值
								{															//	進入else if敘述
									FCOptputStr = "11";										//	設定FCOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFC() > DataProcessing.GetFCth3() )	//	大於第三門檻值
								{															//	進入else if敘述
									FCOptputStr = "01";										//	設定FCOptputStr
								}															//	結束else if敘述
							}
							else if( ChannelNameTemp.equals("D") )
							{
								SensorData.SetFD(Integer.valueOf(SensorDataTemp));			//	填入數值
								if( SensorData.GetFD() < DataProcessing.GetFDth1() )		//	小於第一門檻值
								{															//	進入if敘述
									FDOptputStr = "00";										//	設定FDOptputStr
								}															//	結束if敘述
								else if( SensorData.GetFD() < DataProcessing.GetFDth2() )	//	小於第二門檻值
								{															//	進入else if敘述
									FDOptputStr = "01";										//	設定FDOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFD() < DataProcessing.GetFDth3() )	//	小於第三門檻值
								{															//	進入else if敘述
									FDOptputStr = "11";										//	設定FDOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFD() > DataProcessing.GetFDth3() )	//	大於第三門檻值
								{															//	進入else if敘述
									FDOptputStr = "01";										//	設定FDOptputStr
								}															//	結束else if敘述
							}
							else if( ChannelNameTemp.equals("E") )
							{
								SensorData.SetFE(Integer.valueOf(SensorDataTemp));			//	填入數值
								if( SensorData.GetFE() < DataProcessing.GetFEth1() )		//	小於第一門檻值
								{															//	進入if敘述
									FEOptputStr = "00";										//	設定FEOptputStr
								}															//	結束if敘述
								else if( SensorData.GetFE() < DataProcessing.GetFEth2() )	//	小於第二門檻值
								{															//	進入else if敘述
									FEOptputStr = "01";										//	設定FEOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFE() < DataProcessing.GetFEth3() )	//	小於第三門檻值
								{															//	進入else if敘述
									FEOptputStr = "11";										//	設定FEOptputStr
								}															//	結束else if敘述
								else if( SensorData.GetFE() > DataProcessing.GetFEth3() )	//	大於第三門檻值
								{															//	進入else if敘述
									FEOptputStr = "01";										//	設定FEOptputStr
								}															//	結束else if敘述
							}
							else if( ChannelNameTemp.equals("F") )
							{
								SensorData.SetBT(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("G") )
							{
								SensorData.SetAX(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("H") )
							{
								SensorData.SetAY(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("I") )
							{
								SensorData.SetAZ(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("J") )
							{
								SensorData.SetGX(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("K") )
							{
								SensorData.SetGY(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							else if( ChannelNameTemp.equals("L") )
							{
								SensorData.SetGZ(Integer.valueOf(SensorDataTemp));			//	填入數值
							}
							ChannelNameTemp = BufferString;									//	將通道名稱寫入ChannelNameTemp
							SensorDataTemp = "";											//	清空SensorDataTemp
						}																	//	結束if敘述
						else if(BufferString.equals("0") || 
								BufferString.equals("1") || 
								BufferString.equals("2") || 
								BufferString.equals("3") || 
								BufferString.equals("4") || 
								BufferString.equals("5") || 
								BufferString.equals("6") || 
								BufferString.equals("7") || 
								BufferString.equals("8") || 
								BufferString.equals("9") )									//	若當前分析字元為數值
						{																	//	進入else if敘述
							SensorDataTemp = SensorDataTemp + BufferString;					//	累計數值資料
						}																	//	結束else if敘述
						
						if(DisplayTextCount > 120)											//	若DisplayTextCount超過20字
						{
							DisplayText = "";
							DisplayTextCount = 0;
						}
						else
						{
							DisplayText = 
								"FA:" + SensorData.GetFA() + '\n' +
								"FB:" + SensorData.GetFB() + '\n' +
								"FC:" + SensorData.GetFC() + '\n' +
								"FD:" + SensorData.GetFD() + '\n' +
								"FE:" + SensorData.GetFE() + '\n' +
								"BT:" + SensorData.GetBT() + '\n' +
								"AX:" + SensorData.GetAX() + '\n' +
								"AY:" + SensorData.GetAY() + '\n' +
								"AZ:" + SensorData.GetAZ() + '\n' +
								"GX:" + SensorData.GetGX() + '\n' +
								"GY:" + SensorData.GetGY() + '\n' +
								"GZ:" + SensorData.GetGZ()	;
							//DisplayText = DisplayText + BufferString;
							//DisplayTextCount = DisplayTextCount + 1;
						}
						
						final String FinalDisplayText = this.communicationNamne+"\n" + DisplayText;
						runOnUiThread(new Runnable() {
							@Override
							public void run() {
								information.get(0).setText(FinalDisplayText);

							}
						});
						
					}																		//	結束if敘述
				} catch (IOException e) {

				}
			}
			try {
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			this.interrupt();
		}
	}
	
	class MyHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
				case UPDATE_SETTING_SUCCESS:
					// 在這邊寫要操作UI(Activity)的部分，就會動作了。
					String mes=(String) msg.obj;
					TextView_L.setText(mes);
				case UPDATE_SETTING_SU:
					String mes1=(String) msg.obj;
					TextView_R.setText(mes1);
			}
			super.handleMessage(msg);
		}
	}
	public void say(final int id){
		new Runnable() {
			@Override
			public void run() {
				try {
					final MediaPlayer player = MediaPlayer.create(MainActivity.this, id);
					if (player != null) {
						player.stop();
					}
					if (!player.isPlaying())
					{player.prepare();
						player.start();
					}
					player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
						@Override
						public void onCompletion(MediaPlayer mp) {
							player.release();
						}
					});
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}.run();
	}
	public class DataProcess extends Thread {
		private Comm left, right;
		public boolean isRun = true;
		private ArrayList<HandPattern> handPatterns;

		private String LH, RH;
		private String lastPattern;
		public DataProcess(Comm left, Comm right) {
			this.left = left;
			this.right = right;
			handPatterns = new ArrayList<HandPattern>();
			// 010 00000 , xxx 01111	 左手 右手
			//z
			//數字區
			handPatterns.add(new HandPattern("零", "^(000)(01000)$", "^(010)(11111)$", R.raw.zero));
			handPatterns.add(new HandPattern("一", "^(000)(01000)$", "^(010)(10111)$", R.raw.one));
			handPatterns.add(new HandPattern("二", "^(000)(01000)$", "^(010)(10011)$", R.raw.two));
			handPatterns.add(new HandPattern("三", "^(000)(01000)$", "^(010)(10001)$", R.raw.three));
			handPatterns.add(new HandPattern("四", "^(000)(01000)$", "^(010)(10000)$", R.raw.four));
			handPatterns.add(new HandPattern("五", "^(000)(01000)$", "^(010)(01111)$", R.raw.five));
			handPatterns.add(new HandPattern("六", "^(000)(01000)$", "^(101)(00111)$", R.raw.six));
			handPatterns.add(new HandPattern("七", "^(000)(01000)$", "^(101)(00011)$", R.raw.seven));
			handPatterns.add(new HandPattern("八","^(000)(01000)$", "^(101)(00001)$", R.raw.eight));
			handPatterns.add(new HandPattern("九", "^(000)(01000)$", "^(101)(00000)$", R.raw.nine));
			//代名詞
			handPatterns.add(new HandPattern("你", "^([01]{8,8})$","^(101)(00111)$" , R.raw.you));
			handPatterns.add(new HandPattern("你好", "^(000)(00000)$", "^(101)(10111)$", R.raw.hello));
			//handPatterns.add(new HandPattern("好", "^(010)(11111)$", "^([01]{8,8})$", R.raw.good));
			handPatterns.add(new HandPattern("手語", "^(011)(00000)$", "^(101)(00000)$", R.raw.signal_language));
			//handPatterns.add(new HandPattern("翻譯手套", "^(000)(00000)$", "^(101)(01111)$", R.raw.signal_language));
			handPatterns.add(new HandPattern("我","^([01]{8,8})$" , "^(010)(00111)$", R.raw.i));
			handPatterns.add(new HandPattern("他", "^(011)(01111)$","^(101)(10111)$", R.raw.he));
			handPatterns.add(new HandPattern("她", "^(010)(11110)$","^(101)(10111)$", R.raw.she));

			//名詞
			//handPatterns.add(new HandPattern("男生", "^([01]{8,8})$", "^(101)(01111)$", R.raw.boy));
			handPatterns.add(new HandPattern("女生", "^([01]{8,8})$", "^(010)(11110)$", R.raw.girl));
			//handPatterns.add(new HandPattern("結婚", "^(010)(11110)$", "^(101)(0111)$", R.raw.marry));
			//handPatterns.add(new HandPattern("離婚", "^(010)(11110)$", "^(101)(0111)$", R.raw.divorce));
			//handPatterns.add(new HandPattern("爸爸", "^([01]{8,8})$", "^(101)(11000)$", R.raw.father));
			//handPatterns.add(new HandPattern("媽媽", "^([01]{8,8})$", "^(101)(11000)$", R.raw.mother));
			//handPatterns.add(new HandPattern("兒子", "^(101)(01111)$", "^(101)(01111)$", R.raw.son));
			//handPatterns.add(new HandPattern("女兒", "^(101)(01111)$", "^(101)(01111)$", R.raw.daughter));
			handPatterns.add(new HandPattern("拿", "^([01]{8,8})$", "^(001)(11111)$", R.raw.giveme));
			handPatterns.add(new HandPattern("到", "^([01]{8,8})$", "^(010)(01110)$", R.raw.come));
			handPatterns.add(new HandPattern("愛", "^(001)(00000)$", "^([01]{3,3})(01111)$", R.raw.love));
			handPatterns.add(new HandPattern("對不起","^([01]{8,8})$", "^(010)(10000)$", R.raw.sorry));
			handPatterns.add(new HandPattern("沒關係","^(010)(11000)$", "^(101)(11000)$", R.raw.dontworry));
			// 000 00000 , xxx 01111
			handPatterns.add(new HandPattern("孤單", "^(000)(00000)$", "^([01]{3,3})(01111)$", R.raw.alone));
			// 100 00000 , xxx 01111
			//handPatterns.add(new HandPattern("錄取", "^(100)(00000)$", "^([01]{3,3})(01111)$", R.raw.enroll));
			// 011 00000 , xxx 01111
			handPatterns.add(new HandPattern("遲", "^(010)(00000)$", "^(010)(00000)$", R.raw.late));
			handPatterns.add(new HandPattern("保護", "^(011)(00000)$", "^([01]{3,3})(01111)$", R.raw.protection));
			handPatterns.add(new HandPattern("救命", "^(100)(11111)$", "^(100)(11111)$", R.raw.help));
			handPatterns.add(new HandPattern("謝謝", "^(011)(11111)$", "^(101)(11111)$", R.raw.thx));
			handPatterns.add(new HandPattern("在", "^(001)(11111)$", "^(001)(11111)$", R.raw.at));
			handPatterns.add(new HandPattern("評審", "^(011)(00000)$", "^(100)(00000)$", R.raw.tether));
			handPatterns.add(new HandPattern("三明治", "^(010)(10001)$", "^(101)(00000)$", R.raw.sandwitch));
			handPatterns.add(new HandPattern("需要", "^([01]{8,8})$", "^(001)(10000)$", R.raw.need));
			handPatterns.add(new HandPattern("幫忙", "^(010)(00000)$", "^([01]{3,3})(01111)$", R.raw.helpyou));
			handPatterns.add(new HandPattern("咖啡", "^(011)(11111)$", "^(010)(10011)$", R.raw.coffee));
			handPatterns.add(new HandPattern("價錢", "^([01]{8,8})$", "^(000)(11000)$", R.raw.money));
			handPatterns.add(new HandPattern("多少",  "^([01]{8,8})$", "^(100)(00000)$", R.raw.howmuch));
			handPatterns.add(new HandPattern("翻譯手套", "^(100)(00110)$", "^(100)(00110)$", R.raw.translateglove));
			handPatterns.add(new HandPattern("是", "^([01]{8,8})$", "^(010)(10000)$", R.raw.is));
			//handPatterns.add(new HandPattern("回家",  "^(011)(00000)$", "^(101)(01111)$", R.raw.go_home)); // maybe roll worning
			//handPatterns.add(new HandPattern("ok",  "^(010)(10000)$", "^([01]{8,8})$", R.raw.ok));
			//handPatterns.add(new HandPattern("可以",  "^(001)(00000)$", "^(010)(11110)$", R.raw.can));
			//handPatterns.add(new HandPattern("道路",  "^(011)(01110)$", "^(101)(01110)$", R.raw.roll));
			handPatterns.add(new HandPattern("台北",  "^(010)(00111)$", "^(010)(00111)$", R.raw.taipei));
			handPatterns.add(new HandPattern("科技",  "^(001)(11111)$", "^(101)(00111)$", R.raw.tech));
			handPatterns.add(new HandPattern("大學",  "^(001)(10111)$", "^(001)(10111)$", R.raw.uneversity));
			//handPatterns.add(new HandPattern("大家",  "^([01]{8,8})$", "^(001)(10111)$", R.raw.everyone));
/*有加速度*/	handPatterns.add(new HandPattern("有", "^([01]{8,8})$", "^(010)(00000)$", R.raw.has));
/*有加速度*/	handPatterns.add(new HandPattern("壞人", "(010)(11111)$", "^(001)(00000)$",R.raw.badperson));
///*有加速度*/	handPatterns.add(new HandPattern("在", "(000)(11111)$", "(000)(11111)$", R.raw.at));
/*有加速度*/	handPatterns.add(new HandPattern("跟蹤", "(010)(10111)$", "(010)(10111)$", R.raw.com));
/*有x加速度*/	handPatterns.add(new HandPattern("拜託", "(010)(11111)$", "(010)(11111)$", R.raw.pls));
		}

		@Override
		public void run() {
			super.run();
			while (this.isRun) {
				// 如果左右手的 Socket 都在執行的話，就開始判斷
				if (left.isrun && right.isrun) {
					//Log.i(TAG, "detect");
					LH = left.receiveString;
					RH = right.receiveString;

					if (RH != "" && LH != "") {
						boolean findPattern = false;
						String nowPattern = "";
						for (int i = 0; i < handPatterns.size(); i++) {
							if (handPatterns.get(i).isMatch(LH, RH)) {
								if (lastPattern != handPatterns.get(i).word)
								{
									lastPattern = handPatterns.get(i).word;
									if (lastPattern.equals("孤單"))
									{
										if (left.x_dac>10 && left.x_dac>10&& left.z_dac>10)
										{
											findPattern=true;
										}
										else
										{findPattern=true;
											lastPattern="";
										}
									}
									if (nowPattern.equals(lastPattern))
									{

									}
									else
									{

										nowPattern=lastPattern;
										for (int k = 0; k < handPatterns.size(); k++)
										{
											if (lastPattern == handPatterns.get(k).word)
											{
												say(handPatterns.get(k).mp3ID);
											}
										}
										//say(handPatterns.get(i).mp3ID);
									}
									findPattern = true;
									break;
								} else {
									findPattern = true;

									break;
								}
							}
						}

						//   this is word_a
						try{
							// 透過Message來傳遞值做對應操作UI(Activity)的部分即可執行。
							Message m = new Message();
							//	m.what = UPDATE_SETTING_SUCCESS;
							m=handler.obtainMessage(UPDATE_SETTING_SUCCESS,word_a);
							handler.sendMessage(m);

							// 在這邊寫要操作UI(Activity)的部分，不會動作，還有可能程式會當掉。
						}catch (Exception e)
						{
							e.printStackTrace();

							// 在這邊寫要操作UI(Activity)的部分，不會動作，還有可能程式會當掉。
						}
						if (!findPattern) {
							lastPattern = "";
						}
						else
						{

							word_a=lastPattern;
						}
					}
					try {
						Thread.sleep(1500);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}
	private void startVoiceRecognitionActivity()										//  startVoiceRecognitionActivity副程式
	{																				   //  進入startVoiceRecognitionActivity副程式
		Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);	   //  通過Intent傳遞語音辨識的模式
		intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
		//  設定語言模式和自由形式的語音辨識
		intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Speech recognition demo");   //  提示語音開始
		startActivityForResult(intent, VoiceRecognition.GetVOICE_RECOGNITION_REQUEST_CODE());			//  開始執行我們的Intent、語音辨識
	}																				   //  結束startVoiceRecognitionActivity副程式
}																					   //  結束MainActivity類別
